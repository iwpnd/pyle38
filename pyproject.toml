[tool.poetry]
name = "pyle38"
version = "0.13.0"
description = "Async python client for Tile38"
authors = ["Benjamin Ramser <iwpnd@posteo.de>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/iwpnd/pyle38"
repository = "https://github.com/iwpnd/pyle38"
keywords = ["tile38", "async", "client"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Operating System :: OS Independent",
    "Topic :: Database :: Front-Ends",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Typing :: Typed"]
include = ["LICENSE"]

[tool.poetry.dependencies]
python = "^3.10"
pydantic = "^2.9.1"
redis = "^5.0.8"

[tool.poetry.group.dev.dependencies]
types-redis = "^4.6.0.20240903"
pytest = "^8.3.2"
pre-commit = "^3.8.0"
pytest-asyncio = "^0.24.0"
gitlint = "^0.19.0"
poethepoet = "^0.28.0"
isort = "^5.10.1"
pytest-cov = "^5.0.0"
mypy = "^1.11.2"
python-semantic-release = "^9.8.8"
ruff = ">=0.6.4,<0.8.0"

[tool.semantic_release]
version_variables = [
    "pyle38/__init__.py:__version__",
    "pyproject.toml:version"
]
commit_subject = "ci: release v{version}"
branch = "main"
upload_to_release = true
build_command = "pip install poetry && poetry build"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "docs", "refactor"]

[tool.semantic_release.changelog]
exclude_commit_patterns = [
  "chore:",
  "chore\\(release\\):",
  "chore\\(deps-dev\\):",
  "build\\(deps-dev\\):",
  "build\\(deps\\):",
  "ci:",
  "docs:",
]


[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"

[mypy]
python_version = 3.10
ignore_missing_imports = true

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F"]
ignore = ["E501"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.poe.tasks]
test       = "poetry run pytest -vv --asyncio-mode=auto -s tests/"
test-cov   = "poetry run pytest -vv --asyncio-mode=auto -s --cov=pyle38 tests/ --cov-report xml:/home/runner/coverage.xml"
test-single = "poetry run pytest -vv --asyncio-mode=auto -s"
mypy       = "poetry run mypy --ignore-missing-imports --config-file pyproject.toml"
lint       = "ruff check ."
up         = "docker-compose up"
down       = "docker-compose down"
